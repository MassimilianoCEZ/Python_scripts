##This is an animated version of my original script "Taylor_series.py" generated by using Gpt 3.5



import matplotlib.pyplot as plt
import numpy as np
from sympy import *
from scipy.special import factorial
from PIL import Image
import imageio
import os
import subprocess

# Set the number of frames and the filename for the GIF
n_frames = 16
gif_filename = "total_sum.gif"

x, y = symbols('x y')
y = exp(x)
x0 = 0
n = 15

# Create an array of x values for plotting
x_vals = np.linspace(x0 - 3, x0 + 3, 100)
y_or = np.exp(x_vals)

frames = []  # List to store the frames

for i in range(n_frames + 1):
    total_sum = 0

    for j in range(i + 1):
        derivative = diff(y, x, j)
        value_at_x0 = derivative.subs(x, x0)
        result = value_at_x0 * (x_vals - x0)**j * factorial(j, exact=True)**(-1)
        total_sum += result

    # Evaluate each term of the symbolic expression for each value in the numpy array
    y_vals = np.array([term.evalf(subs={x: val}) for term, val in zip(total_sum, x_vals)])

    # Plot the total sum function
    plt.plot(x_vals, y_or)
    plt.plot(x_vals, y_vals)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title(f'Total Sum (n = {i})')
    plt.grid(True)

    # Set the x-axis limits centered at x0
    plt.xlim(x0 - 3, x0 + 3)

    # Set the y-axis limits from -1.5 to 1.5
    plt.ylim(-1.5, 1.5)

    # Create a PIL Image from the plot and append it to the frames list
    plt.savefig(f"frame_{i}.png")
    frames.append(Image.open(f"frame_{i}.png"))
    plt.clf()  # Clear the plot for the next iteration

# Save the frames as a GIF

frame_duration = int(1000 / 1)  # Duration per frame in milliseconds
imageio.mimsave(gif_filename, frames, duration=frame_duration)

# Delete the temporary frame images
for i in range(n_frames + 1):
    filename = f"frame_{i}.png"
    if os.path.exists(filename):
        os.remove(filename)

subprocess.run(['explorer', gif_filename])